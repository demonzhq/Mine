using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DianDang
{
	/// <summary>
	/// Strongly-typed collection for the DDCarInfo class.
	/// </summary>
    [Serializable]
	public partial class DDCarInfoCollection : ActiveList<DDCarInfo, DDCarInfoCollection>
	{	   
		public DDCarInfoCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DDCarInfoCollection</returns>
		public DDCarInfoCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DDCarInfo o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the DDCarInfo table.
	/// </summary>
	[Serializable]
	public partial class DDCarInfo : ActiveRecord<DDCarInfo>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DDCarInfo()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DDCarInfo(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DDCarInfo(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DDCarInfo(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("DDCarInfo", TableType.Table, DataService.GetInstance("DianDang"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarCarID = new TableSchema.TableColumn(schema);
				colvarCarID.ColumnName = "CarID";
				colvarCarID.DataType = DbType.Int32;
				colvarCarID.MaxLength = 0;
				colvarCarID.AutoIncrement = true;
				colvarCarID.IsNullable = false;
				colvarCarID.IsPrimaryKey = true;
				colvarCarID.IsForeignKey = false;
				colvarCarID.IsReadOnly = false;
				colvarCarID.DefaultSetting = @"";
				colvarCarID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCarID);
				
				TableSchema.TableColumn colvarLicenseNumber = new TableSchema.TableColumn(schema);
				colvarLicenseNumber.ColumnName = "LicenseNumber";
				colvarLicenseNumber.DataType = DbType.AnsiString;
				colvarLicenseNumber.MaxLength = 50;
				colvarLicenseNumber.AutoIncrement = false;
				colvarLicenseNumber.IsNullable = true;
				colvarLicenseNumber.IsPrimaryKey = false;
				colvarLicenseNumber.IsForeignKey = false;
				colvarLicenseNumber.IsReadOnly = false;
				colvarLicenseNumber.DefaultSetting = @"";
				colvarLicenseNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLicenseNumber);
				
				TableSchema.TableColumn colvarCarType = new TableSchema.TableColumn(schema);
				colvarCarType.ColumnName = "CarType";
				colvarCarType.DataType = DbType.AnsiString;
				colvarCarType.MaxLength = 50;
				colvarCarType.AutoIncrement = false;
				colvarCarType.IsNullable = true;
				colvarCarType.IsPrimaryKey = false;
				colvarCarType.IsForeignKey = false;
				colvarCarType.IsReadOnly = false;
				colvarCarType.DefaultSetting = @"";
				colvarCarType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCarType);
				
				TableSchema.TableColumn colvarEngineNumber = new TableSchema.TableColumn(schema);
				colvarEngineNumber.ColumnName = "EngineNumber";
				colvarEngineNumber.DataType = DbType.AnsiString;
				colvarEngineNumber.MaxLength = 50;
				colvarEngineNumber.AutoIncrement = false;
				colvarEngineNumber.IsNullable = true;
				colvarEngineNumber.IsPrimaryKey = false;
				colvarEngineNumber.IsForeignKey = false;
				colvarEngineNumber.IsReadOnly = false;
				colvarEngineNumber.DefaultSetting = @"";
				colvarEngineNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEngineNumber);
				
				TableSchema.TableColumn colvarCarcaseNumber = new TableSchema.TableColumn(schema);
				colvarCarcaseNumber.ColumnName = "CarcaseNumber";
				colvarCarcaseNumber.DataType = DbType.AnsiString;
				colvarCarcaseNumber.MaxLength = 50;
				colvarCarcaseNumber.AutoIncrement = false;
				colvarCarcaseNumber.IsNullable = true;
				colvarCarcaseNumber.IsPrimaryKey = false;
				colvarCarcaseNumber.IsForeignKey = false;
				colvarCarcaseNumber.IsReadOnly = false;
				colvarCarcaseNumber.DefaultSetting = @"";
				colvarCarcaseNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCarcaseNumber);
				
				TableSchema.TableColumn colvarInsuranceDate = new TableSchema.TableColumn(schema);
				colvarInsuranceDate.ColumnName = "InsuranceDate";
				colvarInsuranceDate.DataType = DbType.AnsiString;
				colvarInsuranceDate.MaxLength = 50;
				colvarInsuranceDate.AutoIncrement = false;
				colvarInsuranceDate.IsNullable = true;
				colvarInsuranceDate.IsPrimaryKey = false;
				colvarInsuranceDate.IsForeignKey = false;
				colvarInsuranceDate.IsReadOnly = false;
				colvarInsuranceDate.DefaultSetting = @"";
				colvarInsuranceDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInsuranceDate);
				
				TableSchema.TableColumn colvarRoadtollDate = new TableSchema.TableColumn(schema);
				colvarRoadtollDate.ColumnName = "RoadtollDate";
				colvarRoadtollDate.DataType = DbType.AnsiString;
				colvarRoadtollDate.MaxLength = 50;
				colvarRoadtollDate.AutoIncrement = false;
				colvarRoadtollDate.IsNullable = true;
				colvarRoadtollDate.IsPrimaryKey = false;
				colvarRoadtollDate.IsForeignKey = false;
				colvarRoadtollDate.IsReadOnly = false;
				colvarRoadtollDate.DefaultSetting = @"";
				colvarRoadtollDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRoadtollDate);
				
				TableSchema.TableColumn colvarCheckDate = new TableSchema.TableColumn(schema);
				colvarCheckDate.ColumnName = "CheckDate";
				colvarCheckDate.DataType = DbType.AnsiString;
				colvarCheckDate.MaxLength = 50;
				colvarCheckDate.AutoIncrement = false;
				colvarCheckDate.IsNullable = true;
				colvarCheckDate.IsPrimaryKey = false;
				colvarCheckDate.IsForeignKey = false;
				colvarCheckDate.IsReadOnly = false;
				colvarCheckDate.DefaultSetting = @"";
				colvarCheckDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCheckDate);
				
				TableSchema.TableColumn colvarPawnageID = new TableSchema.TableColumn(schema);
				colvarPawnageID.ColumnName = "PawnageID";
				colvarPawnageID.DataType = DbType.Int32;
				colvarPawnageID.MaxLength = 0;
				colvarPawnageID.AutoIncrement = false;
				colvarPawnageID.IsNullable = true;
				colvarPawnageID.IsPrimaryKey = false;
				colvarPawnageID.IsForeignKey = false;
				colvarPawnageID.IsReadOnly = false;
				colvarPawnageID.DefaultSetting = @"";
				colvarPawnageID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPawnageID);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DianDang"].AddSchema("DDCarInfo",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("CarID")]
		[Bindable(true)]
		public int CarID 
		{
			get { return GetColumnValue<int>(Columns.CarID); }
			set { SetColumnValue(Columns.CarID, value); }
		}
		  
		[XmlAttribute("LicenseNumber")]
		[Bindable(true)]
		public string LicenseNumber 
		{
			get { return GetColumnValue<string>(Columns.LicenseNumber); }
			set { SetColumnValue(Columns.LicenseNumber, value); }
		}
		  
		[XmlAttribute("CarType")]
		[Bindable(true)]
		public string CarType 
		{
			get { return GetColumnValue<string>(Columns.CarType); }
			set { SetColumnValue(Columns.CarType, value); }
		}
		  
		[XmlAttribute("EngineNumber")]
		[Bindable(true)]
		public string EngineNumber 
		{
			get { return GetColumnValue<string>(Columns.EngineNumber); }
			set { SetColumnValue(Columns.EngineNumber, value); }
		}
		  
		[XmlAttribute("CarcaseNumber")]
		[Bindable(true)]
		public string CarcaseNumber 
		{
			get { return GetColumnValue<string>(Columns.CarcaseNumber); }
			set { SetColumnValue(Columns.CarcaseNumber, value); }
		}
		  
		[XmlAttribute("InsuranceDate")]
		[Bindable(true)]
		public string InsuranceDate 
		{
			get { return GetColumnValue<string>(Columns.InsuranceDate); }
			set { SetColumnValue(Columns.InsuranceDate, value); }
		}
		  
		[XmlAttribute("RoadtollDate")]
		[Bindable(true)]
		public string RoadtollDate 
		{
			get { return GetColumnValue<string>(Columns.RoadtollDate); }
			set { SetColumnValue(Columns.RoadtollDate, value); }
		}
		  
		[XmlAttribute("CheckDate")]
		[Bindable(true)]
		public string CheckDate 
		{
			get { return GetColumnValue<string>(Columns.CheckDate); }
			set { SetColumnValue(Columns.CheckDate, value); }
		}
		  
		[XmlAttribute("PawnageID")]
		[Bindable(true)]
		public int? PawnageID 
		{
			get { return GetColumnValue<int?>(Columns.PawnageID); }
			set { SetColumnValue(Columns.PawnageID, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varLicenseNumber,string varCarType,string varEngineNumber,string varCarcaseNumber,string varInsuranceDate,string varRoadtollDate,string varCheckDate,int? varPawnageID)
		{
			DDCarInfo item = new DDCarInfo();
			
			item.LicenseNumber = varLicenseNumber;
			
			item.CarType = varCarType;
			
			item.EngineNumber = varEngineNumber;
			
			item.CarcaseNumber = varCarcaseNumber;
			
			item.InsuranceDate = varInsuranceDate;
			
			item.RoadtollDate = varRoadtollDate;
			
			item.CheckDate = varCheckDate;
			
			item.PawnageID = varPawnageID;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varCarID,string varLicenseNumber,string varCarType,string varEngineNumber,string varCarcaseNumber,string varInsuranceDate,string varRoadtollDate,string varCheckDate,int? varPawnageID)
		{
			DDCarInfo item = new DDCarInfo();
			
				item.CarID = varCarID;
			
				item.LicenseNumber = varLicenseNumber;
			
				item.CarType = varCarType;
			
				item.EngineNumber = varEngineNumber;
			
				item.CarcaseNumber = varCarcaseNumber;
			
				item.InsuranceDate = varInsuranceDate;
			
				item.RoadtollDate = varRoadtollDate;
			
				item.CheckDate = varCheckDate;
			
				item.PawnageID = varPawnageID;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn CarIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn LicenseNumberColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CarTypeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn EngineNumberColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CarcaseNumberColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn InsuranceDateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn RoadtollDateColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CheckDateColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn PawnageIDColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string CarID = @"CarID";
			 public static string LicenseNumber = @"LicenseNumber";
			 public static string CarType = @"CarType";
			 public static string EngineNumber = @"EngineNumber";
			 public static string CarcaseNumber = @"CarcaseNumber";
			 public static string InsuranceDate = @"InsuranceDate";
			 public static string RoadtollDate = @"RoadtollDate";
			 public static string CheckDate = @"CheckDate";
			 public static string PawnageID = @"PawnageID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
