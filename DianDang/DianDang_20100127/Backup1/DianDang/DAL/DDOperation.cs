using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DianDang
{
	/// <summary>
	/// Strongly-typed collection for the DDOperation class.
	/// </summary>
    [Serializable]
	public partial class DDOperationCollection : ActiveList<DDOperation, DDOperationCollection>
	{	   
		public DDOperationCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DDOperationCollection</returns>
		public DDOperationCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DDOperation o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the DDOperation table.
	/// </summary>
	[Serializable]
	public partial class DDOperation : ActiveRecord<DDOperation>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DDOperation()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DDOperation(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DDOperation(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DDOperation(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("DDOperation", TableType.Table, DataService.GetInstance("DianDang"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarOperationID = new TableSchema.TableColumn(schema);
				colvarOperationID.ColumnName = "OperationID";
				colvarOperationID.DataType = DbType.Int32;
				colvarOperationID.MaxLength = 0;
				colvarOperationID.AutoIncrement = true;
				colvarOperationID.IsNullable = false;
				colvarOperationID.IsPrimaryKey = true;
				colvarOperationID.IsForeignKey = false;
				colvarOperationID.IsReadOnly = false;
				colvarOperationID.DefaultSetting = @"";
				colvarOperationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOperationID);
				
				TableSchema.TableColumn colvarTicketID = new TableSchema.TableColumn(schema);
				colvarTicketID.ColumnName = "TicketID";
				colvarTicketID.DataType = DbType.Int32;
				colvarTicketID.MaxLength = 0;
				colvarTicketID.AutoIncrement = false;
				colvarTicketID.IsNullable = true;
				colvarTicketID.IsPrimaryKey = false;
				colvarTicketID.IsForeignKey = false;
				colvarTicketID.IsReadOnly = false;
				colvarTicketID.DefaultSetting = @"";
				colvarTicketID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTicketID);
				
				TableSchema.TableColumn colvarPawnageID = new TableSchema.TableColumn(schema);
				colvarPawnageID.ColumnName = "PawnageID";
				colvarPawnageID.DataType = DbType.Int32;
				colvarPawnageID.MaxLength = 0;
				colvarPawnageID.AutoIncrement = false;
				colvarPawnageID.IsNullable = true;
				colvarPawnageID.IsPrimaryKey = false;
				colvarPawnageID.IsForeignKey = false;
				colvarPawnageID.IsReadOnly = false;
				colvarPawnageID.DefaultSetting = @"";
				colvarPawnageID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPawnageID);
				
				TableSchema.TableColumn colvarOperationType = new TableSchema.TableColumn(schema);
				colvarOperationType.ColumnName = "OperationType";
				colvarOperationType.DataType = DbType.Int32;
				colvarOperationType.MaxLength = 0;
				colvarOperationType.AutoIncrement = false;
				colvarOperationType.IsNullable = true;
				colvarOperationType.IsPrimaryKey = false;
				colvarOperationType.IsForeignKey = false;
				colvarOperationType.IsReadOnly = false;
				colvarOperationType.DefaultSetting = @"";
				colvarOperationType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOperationType);
				
				TableSchema.TableColumn colvarOperationNumber = new TableSchema.TableColumn(schema);
				colvarOperationNumber.ColumnName = "OperationNumber";
				colvarOperationNumber.DataType = DbType.AnsiString;
				colvarOperationNumber.MaxLength = 50;
				colvarOperationNumber.AutoIncrement = false;
				colvarOperationNumber.IsNullable = true;
				colvarOperationNumber.IsPrimaryKey = false;
				colvarOperationNumber.IsForeignKey = false;
				colvarOperationNumber.IsReadOnly = false;
				colvarOperationNumber.DefaultSetting = @"";
				colvarOperationNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOperationNumber);
				
				TableSchema.TableColumn colvarServiceFee = new TableSchema.TableColumn(schema);
				colvarServiceFee.ColumnName = "ServiceFee";
				colvarServiceFee.DataType = DbType.AnsiString;
				colvarServiceFee.MaxLength = 50;
				colvarServiceFee.AutoIncrement = false;
				colvarServiceFee.IsNullable = true;
				colvarServiceFee.IsPrimaryKey = false;
				colvarServiceFee.IsForeignKey = false;
				colvarServiceFee.IsReadOnly = false;
				colvarServiceFee.DefaultSetting = @"";
				colvarServiceFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceFee);
				
				TableSchema.TableColumn colvarInterestFee = new TableSchema.TableColumn(schema);
				colvarInterestFee.ColumnName = "InterestFee";
				colvarInterestFee.DataType = DbType.AnsiString;
				colvarInterestFee.MaxLength = 50;
				colvarInterestFee.AutoIncrement = false;
				colvarInterestFee.IsNullable = true;
				colvarInterestFee.IsPrimaryKey = false;
				colvarInterestFee.IsForeignKey = false;
				colvarInterestFee.IsReadOnly = false;
				colvarInterestFee.DefaultSetting = @"";
				colvarInterestFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInterestFee);
				
				TableSchema.TableColumn colvarReturnFee = new TableSchema.TableColumn(schema);
				colvarReturnFee.ColumnName = "ReturnFee";
				colvarReturnFee.DataType = DbType.AnsiString;
				colvarReturnFee.MaxLength = 50;
				colvarReturnFee.AutoIncrement = false;
				colvarReturnFee.IsNullable = true;
				colvarReturnFee.IsPrimaryKey = false;
				colvarReturnFee.IsForeignKey = false;
				colvarReturnFee.IsReadOnly = false;
				colvarReturnFee.DefaultSetting = @"";
				colvarReturnFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReturnFee);
				
				TableSchema.TableColumn colvarOverdueFee = new TableSchema.TableColumn(schema);
				colvarOverdueFee.ColumnName = "OverdueFee";
				colvarOverdueFee.DataType = DbType.AnsiString;
				colvarOverdueFee.MaxLength = 50;
				colvarOverdueFee.AutoIncrement = false;
				colvarOverdueFee.IsNullable = true;
				colvarOverdueFee.IsPrimaryKey = false;
				colvarOverdueFee.IsForeignKey = false;
				colvarOverdueFee.IsReadOnly = false;
				colvarOverdueFee.DefaultSetting = @"";
				colvarOverdueFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOverdueFee);
				
				TableSchema.TableColumn colvarAmount = new TableSchema.TableColumn(schema);
				colvarAmount.ColumnName = "Amount";
				colvarAmount.DataType = DbType.AnsiString;
				colvarAmount.MaxLength = 50;
				colvarAmount.AutoIncrement = false;
				colvarAmount.IsNullable = true;
				colvarAmount.IsPrimaryKey = false;
				colvarAmount.IsForeignKey = false;
				colvarAmount.IsReadOnly = false;
				colvarAmount.DefaultSetting = @"";
				colvarAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAmount);
				
				TableSchema.TableColumn colvarReckonAmount = new TableSchema.TableColumn(schema);
				colvarReckonAmount.ColumnName = "ReckonAmount";
				colvarReckonAmount.DataType = DbType.AnsiString;
				colvarReckonAmount.MaxLength = 50;
				colvarReckonAmount.AutoIncrement = false;
				colvarReckonAmount.IsNullable = true;
				colvarReckonAmount.IsPrimaryKey = false;
				colvarReckonAmount.IsForeignKey = false;
				colvarReckonAmount.IsReadOnly = false;
				colvarReckonAmount.DefaultSetting = @"";
				colvarReckonAmount.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReckonAmount);

                TableSchema.TableColumn colvarServiceFeeRate = new TableSchema.TableColumn(schema);
                colvarServiceFeeRate.ColumnName = "ServiceFeeRate";
                colvarServiceFeeRate.DataType = DbType.AnsiString;
                colvarServiceFeeRate.MaxLength = 50;
                colvarServiceFeeRate.AutoIncrement = false;
                colvarServiceFeeRate.IsNullable = true;
                colvarServiceFeeRate.IsPrimaryKey = false;
                colvarServiceFeeRate.IsForeignKey = false;
                colvarServiceFeeRate.IsReadOnly = false;
                colvarServiceFeeRate.DefaultSetting = @"";
                colvarServiceFeeRate.ForeignKeyTableName = "";
                schema.Columns.Add(colvarServiceFeeRate);

                TableSchema.TableColumn colvarInterestFeeRate = new TableSchema.TableColumn(schema);
                colvarInterestFeeRate.ColumnName = "InterestFeeRate";
                colvarInterestFeeRate.DataType = DbType.AnsiString;
                colvarInterestFeeRate.MaxLength = 50;
                colvarInterestFeeRate.AutoIncrement = false;
                colvarInterestFeeRate.IsNullable = true;
                colvarInterestFeeRate.IsPrimaryKey = false;
                colvarInterestFeeRate.IsForeignKey = false;
                colvarInterestFeeRate.IsReadOnly = false;
                colvarInterestFeeRate.DefaultSetting = @"";
                colvarInterestFeeRate.ForeignKeyTableName = "";
                schema.Columns.Add(colvarInterestFeeRate);
				
				TableSchema.TableColumn colvarOperationDate = new TableSchema.TableColumn(schema);
				colvarOperationDate.ColumnName = "OperationDate";
				colvarOperationDate.DataType = DbType.AnsiString;
				colvarOperationDate.MaxLength = 50;
				colvarOperationDate.AutoIncrement = false;
				colvarOperationDate.IsNullable = true;
				colvarOperationDate.IsPrimaryKey = false;
				colvarOperationDate.IsForeignKey = false;
				colvarOperationDate.IsReadOnly = false;
				colvarOperationDate.DefaultSetting = @"";
				colvarOperationDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOperationDate);
				
				TableSchema.TableColumn colvarStartDate = new TableSchema.TableColumn(schema);
				colvarStartDate.ColumnName = "StartDate";
				colvarStartDate.DataType = DbType.AnsiString;
				colvarStartDate.MaxLength = 50;
				colvarStartDate.AutoIncrement = false;
				colvarStartDate.IsNullable = true;
				colvarStartDate.IsPrimaryKey = false;
				colvarStartDate.IsForeignKey = false;
				colvarStartDate.IsReadOnly = false;
				colvarStartDate.DefaultSetting = @"";
				colvarStartDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartDate);
				
				TableSchema.TableColumn colvarEndDate = new TableSchema.TableColumn(schema);
				colvarEndDate.ColumnName = "EndDate";
				colvarEndDate.DataType = DbType.AnsiString;
				colvarEndDate.MaxLength = 50;
				colvarEndDate.AutoIncrement = false;
				colvarEndDate.IsNullable = true;
				colvarEndDate.IsPrimaryKey = false;
				colvarEndDate.IsForeignKey = false;
				colvarEndDate.IsReadOnly = false;
				colvarEndDate.DefaultSetting = @"";
				colvarEndDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndDate);
				
				TableSchema.TableColumn colvarOperaterName = new TableSchema.TableColumn(schema);
				colvarOperaterName.ColumnName = "OperaterName";
				colvarOperaterName.DataType = DbType.AnsiString;
				colvarOperaterName.MaxLength = 50;
				colvarOperaterName.AutoIncrement = false;
				colvarOperaterName.IsNullable = true;
				colvarOperaterName.IsPrimaryKey = false;
				colvarOperaterName.IsForeignKey = false;
				colvarOperaterName.IsReadOnly = false;
				colvarOperaterName.DefaultSetting = @"";
				colvarOperaterName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOperaterName);
				
				TableSchema.TableColumn colvarPreOperationID = new TableSchema.TableColumn(schema);
				colvarPreOperationID.ColumnName = "PreOperationID";
				colvarPreOperationID.DataType = DbType.Int32;
				colvarPreOperationID.MaxLength = 0;
				colvarPreOperationID.AutoIncrement = false;
				colvarPreOperationID.IsNullable = true;
				colvarPreOperationID.IsPrimaryKey = false;
				colvarPreOperationID.IsForeignKey = false;
				colvarPreOperationID.IsReadOnly = false;
				colvarPreOperationID.DefaultSetting = @"";
				colvarPreOperationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPreOperationID);
				
				TableSchema.TableColumn colvarNextOperationID = new TableSchema.TableColumn(schema);
				colvarNextOperationID.ColumnName = "NextOperationID";
				colvarNextOperationID.DataType = DbType.Int32;
				colvarNextOperationID.MaxLength = 0;
				colvarNextOperationID.AutoIncrement = false;
				colvarNextOperationID.IsNullable = true;
				colvarNextOperationID.IsPrimaryKey = false;
				colvarNextOperationID.IsForeignKey = false;
				colvarNextOperationID.IsReadOnly = false;
				colvarNextOperationID.DefaultSetting = @"";
				colvarNextOperationID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNextOperationID);

				
				TableSchema.TableColumn colvarDeleted = new TableSchema.TableColumn(schema);
				colvarDeleted.ColumnName = "Deleted";
				colvarDeleted.DataType = DbType.Int32;
				colvarDeleted.MaxLength = 0;
				colvarDeleted.AutoIncrement = false;
				colvarDeleted.IsNullable = true;
				colvarDeleted.IsPrimaryKey = false;
				colvarDeleted.IsForeignKey = false;
				colvarDeleted.IsReadOnly = false;
				
				colvarDeleted.DefaultSetting = @"((0))";
				colvarDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeleted);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DianDang"].AddSchema("DDOperation",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("OperationID")]
		[Bindable(true)]
		public int OperationID 
		{
			get { return GetColumnValue<int>(Columns.OperationID); }
			set { SetColumnValue(Columns.OperationID, value); }
		}
		  
		[XmlAttribute("TicketID")]
		[Bindable(true)]
		public int? TicketID 
		{
			get { return GetColumnValue<int?>(Columns.TicketID); }
			set { SetColumnValue(Columns.TicketID, value); }
		}
		  
		[XmlAttribute("PawnageID")]
		[Bindable(true)]
		public int? PawnageID 
		{
			get { return GetColumnValue<int?>(Columns.PawnageID); }
			set { SetColumnValue(Columns.PawnageID, value); }
		}
		  
		[XmlAttribute("OperationType")]
		[Bindable(true)]
		public int? OperationType 
		{
			get { return GetColumnValue<int?>(Columns.OperationType); }
			set { SetColumnValue(Columns.OperationType, value); }
		}
		  
		[XmlAttribute("OperationNumber")]
		[Bindable(true)]
		public string OperationNumber 
		{
			get { return GetColumnValue<string>(Columns.OperationNumber); }
			set { SetColumnValue(Columns.OperationNumber, value); }
		}
		  
		[XmlAttribute("ServiceFee")]
		[Bindable(true)]
		public string ServiceFee 
		{
			get { return GetColumnValue<string>(Columns.ServiceFee); }
			set { SetColumnValue(Columns.ServiceFee, value); }
		}
		  
		[XmlAttribute("InterestFee")]
		[Bindable(true)]
		public string InterestFee 
		{
			get { return GetColumnValue<string>(Columns.InterestFee); }
			set { SetColumnValue(Columns.InterestFee, value); }
		}
		  
		[XmlAttribute("ReturnFee")]
		[Bindable(true)]
		public string ReturnFee 
		{
			get { return GetColumnValue<string>(Columns.ReturnFee); }
			set { SetColumnValue(Columns.ReturnFee, value); }
		}
		  
		[XmlAttribute("OverdueFee")]
		[Bindable(true)]
		public string OverdueFee 
		{
			get { return GetColumnValue<string>(Columns.OverdueFee); }
			set { SetColumnValue(Columns.OverdueFee, value); }
		}
		  
		[XmlAttribute("Amount")]
		[Bindable(true)]
		public string Amount 
		{
			get { return GetColumnValue<string>(Columns.Amount); }
			set { SetColumnValue(Columns.Amount, value); }
		}
		  
		[XmlAttribute("ReckonAmount")]
		[Bindable(true)]
		public string ReckonAmount 
		{
			get { return GetColumnValue<string>(Columns.ReckonAmount); }
			set { SetColumnValue(Columns.ReckonAmount, value); }
		}

        [XmlAttribute("ServiceFeeRate")]
        [Bindable(true)]
        public string ServiceFeeRate
        {
            get { return GetColumnValue<string>(Columns.ServiceFeeRate); }
            set { SetColumnValue(Columns.ServiceFeeRate, value); }
        }

        [XmlAttribute("InterestFeeRate")]
        [Bindable(true)]
        public string InterestFeeRate
        {
            get { return GetColumnValue<string>(Columns.InterestFeeRate); }
            set { SetColumnValue(Columns.InterestFeeRate, value); }
        }

		[XmlAttribute("OperationDate")]
		[Bindable(true)]
		public string OperationDate 
		{
			get { return GetColumnValue<string>(Columns.OperationDate); }
			set { SetColumnValue(Columns.OperationDate, value); }
		}
		  
		[XmlAttribute("StartDate")]
		[Bindable(true)]
		public string StartDate 
		{
			get { return GetColumnValue<string>(Columns.StartDate); }
			set { SetColumnValue(Columns.StartDate, value); }
		}
		  
		[XmlAttribute("EndDate")]
		[Bindable(true)]
		public string EndDate 
		{
			get { return GetColumnValue<string>(Columns.EndDate); }
			set { SetColumnValue(Columns.EndDate, value); }
		}
		  
		[XmlAttribute("OperaterName")]
		[Bindable(true)]
		public string OperaterName 
		{
			get { return GetColumnValue<string>(Columns.OperaterName); }
			set { SetColumnValue(Columns.OperaterName, value); }
		}
		  
		[XmlAttribute("PreOperationID")]
		[Bindable(true)]
		public int? PreOperationID 
		{
			get { return GetColumnValue<int?>(Columns.PreOperationID); }
			set { SetColumnValue(Columns.PreOperationID, value); }
		}




		[XmlAttribute("NextOperationID")]
		[Bindable(true)]
		public int? NextOperationID 
		{
			get { return GetColumnValue<int?>(Columns.NextOperationID); }
			set { SetColumnValue(Columns.NextOperationID, value); }
		}


		  
		[XmlAttribute("Deleted")]
		[Bindable(true)]
		public int? Deleted 
		{
			get { return GetColumnValue<int?>(Columns.Deleted); }
			set { SetColumnValue(Columns.Deleted, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varTicketID,int? varPawnageID,int? varOperationType,string varOperationNumber,string varServiceFee,string varInterestFee,string varReturnFee,string varOverdueFee,string varAmount,string varReckonAmount, string varServiceFeeRate, string varInterestFeeRate, string varOperationDate,string varStartDate,string varEndDate,string varOperaterName,int? varPreOperationID,int? varNextOperationID, int? varDeleted)
		{
			DDOperation item = new DDOperation();
			
			item.TicketID = varTicketID;
			
			item.PawnageID = varPawnageID;
			
			item.OperationType = varOperationType;
			
			item.OperationNumber = varOperationNumber;
			
			item.ServiceFee = varServiceFee;
			
			item.InterestFee = varInterestFee;
			
			item.ReturnFee = varReturnFee;
			
			item.OverdueFee = varOverdueFee;
			
			item.Amount = varAmount;
			
			item.ReckonAmount = varReckonAmount;

            item.ServiceFeeRate = varServiceFeeRate;

            item.InterestFeeRate = varInterestFeeRate;
			
			item.OperationDate = varOperationDate;
			
			item.StartDate = varStartDate;
			
			item.EndDate = varEndDate;
			
			item.OperaterName = varOperaterName;
			
			item.PreOperationID = varPreOperationID;
			
			item.NextOperationID = varNextOperationID;

			
			item.Deleted = varDeleted;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varOperationID,int? varTicketID,int? varPawnageID,int? varOperationType,string varOperationNumber,string varServiceFee,string varInterestFee,string varReturnFee,string varOverdueFee,string varAmount,string varReckonAmount, string varServiceFeeRate, string varInterestFeeRate, string varOperationDate,string varStartDate,string varEndDate,string varOperaterName,int? varPreOperationID,int? varNextOperationID,int? varDeleted)
		{
			DDOperation item = new DDOperation();
			
				item.OperationID = varOperationID;
			
				item.TicketID = varTicketID;
			
				item.PawnageID = varPawnageID;
			
				item.OperationType = varOperationType;
			
				item.OperationNumber = varOperationNumber;
			
				item.ServiceFee = varServiceFee;
			
				item.InterestFee = varInterestFee;
			
				item.ReturnFee = varReturnFee;
			
				item.OverdueFee = varOverdueFee;
			
				item.Amount = varAmount;
			
				item.ReckonAmount = varReckonAmount;

                item.ServiceFeeRate = varServiceFeeRate;

                item.InterestFeeRate = varInterestFeeRate;
			
				item.OperationDate = varOperationDate;
			
				item.StartDate = varStartDate;
			
				item.EndDate = varEndDate;
			
				item.OperaterName = varOperaterName;
			
				item.PreOperationID = varPreOperationID;
			
				item.NextOperationID = varNextOperationID;
			
				item.Deleted = varDeleted;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn OperationIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn TicketIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PawnageIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn OperationTypeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn OperationNumberColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ServiceFeeColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn InterestFeeColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ReturnFeeColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn OverdueFeeColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn AmountColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn ReckonAmountColumn
        {
            get { return Schema.Columns[10]; }
        }

        public static TableSchema.TableColumn ServiceFeeRateColumn
        {
            get { return Schema.Columns[11]; }
        }

        public static TableSchema.TableColumn InterestFeeRateColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        public static TableSchema.TableColumn OperationDateColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn StartDateColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn EndDateColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn OperaterNameColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn PreOperationIDColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn NextOperationIDColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn DeletedColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string OperationID = @"OperationID";
			 public static string TicketID = @"TicketID";
			 public static string PawnageID = @"PawnageID";
			 public static string OperationType = @"OperationType";
			 public static string OperationNumber = @"OperationNumber";
			 public static string ServiceFee = @"ServiceFee";
			 public static string InterestFee = @"InterestFee";
			 public static string ReturnFee = @"ReturnFee";
			 public static string OverdueFee = @"OverdueFee";
			 public static string Amount = @"Amount";
			 public static string ReckonAmount = @"ReckonAmount";
             public static string ServiceFeeRate = @"ServiceFeeRate";
             public static string InterestFeeRate = @"InterestFeeRate";
			 public static string OperationDate = @"OperationDate";
			 public static string StartDate = @"StartDate";
			 public static string EndDate = @"EndDate";
			 public static string OperaterName = @"OperaterName";
			 public static string PreOperationID = @"PreOperationID";
			 public static string NextOperationID = @"NextOperationID";
			 public static string Deleted = @"Deleted";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
