using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DianDang
{
	/// <summary>
	/// Strongly-typed collection for the DDPawnTicket class.
	/// </summary>
    [Serializable]
	public partial class DDPawnTicketCollection : ActiveList<DDPawnTicket, DDPawnTicketCollection>
	{	   
		public DDPawnTicketCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DDPawnTicketCollection</returns>
		public DDPawnTicketCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DDPawnTicket o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the DDPawnTicket table.
	/// </summary>
	[Serializable]
	public partial class DDPawnTicket : ActiveRecord<DDPawnTicket>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DDPawnTicket()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DDPawnTicket(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DDPawnTicket(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DDPawnTicket(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("DDPawnTicket", TableType.Table, DataService.GetInstance("DianDang"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarTicketID = new TableSchema.TableColumn(schema);
				colvarTicketID.ColumnName = "TicketID";
				colvarTicketID.DataType = DbType.Int32;
				colvarTicketID.MaxLength = 0;
				colvarTicketID.AutoIncrement = true;
				colvarTicketID.IsNullable = false;
				colvarTicketID.IsPrimaryKey = true;
				colvarTicketID.IsForeignKey = false;
				colvarTicketID.IsReadOnly = false;
				colvarTicketID.DefaultSetting = @"";
				colvarTicketID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTicketID);
				
				TableSchema.TableColumn colvarCustomerID = new TableSchema.TableColumn(schema);
				colvarCustomerID.ColumnName = "CustomerID";
				colvarCustomerID.DataType = DbType.Int32;
				colvarCustomerID.MaxLength = 0;
				colvarCustomerID.AutoIncrement = false;
				colvarCustomerID.IsNullable = true;
				colvarCustomerID.IsPrimaryKey = false;
				colvarCustomerID.IsForeignKey = false;
				colvarCustomerID.IsReadOnly = false;
				colvarCustomerID.DefaultSetting = @"";
				colvarCustomerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerID);
				
				TableSchema.TableColumn colvarTicketNumber = new TableSchema.TableColumn(schema);
				colvarTicketNumber.ColumnName = "TicketNumber";
				colvarTicketNumber.DataType = DbType.AnsiString;
				colvarTicketNumber.MaxLength = 50;
				colvarTicketNumber.AutoIncrement = false;
				colvarTicketNumber.IsNullable = true;
				colvarTicketNumber.IsPrimaryKey = false;
				colvarTicketNumber.IsForeignKey = false;
				colvarTicketNumber.IsReadOnly = false;
				colvarTicketNumber.DefaultSetting = @"";
				colvarTicketNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTicketNumber);
				
				TableSchema.TableColumn colvarStartDate = new TableSchema.TableColumn(schema);
				colvarStartDate.ColumnName = "StartDate";
				colvarStartDate.DataType = DbType.AnsiString;
				colvarStartDate.MaxLength = 50;
				colvarStartDate.AutoIncrement = false;
				colvarStartDate.IsNullable = true;
				colvarStartDate.IsPrimaryKey = false;
				colvarStartDate.IsForeignKey = false;
				colvarStartDate.IsReadOnly = false;
				colvarStartDate.DefaultSetting = @"";
				colvarStartDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartDate);
				
				TableSchema.TableColumn colvarEndDate = new TableSchema.TableColumn(schema);
				colvarEndDate.ColumnName = "EndDate";
				colvarEndDate.DataType = DbType.AnsiString;
				colvarEndDate.MaxLength = 50;
				colvarEndDate.AutoIncrement = false;
				colvarEndDate.IsNullable = true;
				colvarEndDate.IsPrimaryKey = false;
				colvarEndDate.IsForeignKey = false;
				colvarEndDate.IsReadOnly = false;
				colvarEndDate.DefaultSetting = @"";
				colvarEndDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndDate);
				
				TableSchema.TableColumn colvarStatusID = new TableSchema.TableColumn(schema);
				colvarStatusID.ColumnName = "StatusID";
				colvarStatusID.DataType = DbType.Int32;
				colvarStatusID.MaxLength = 0;
				colvarStatusID.AutoIncrement = false;
				colvarStatusID.IsNullable = true;
				colvarStatusID.IsPrimaryKey = false;
				colvarStatusID.IsForeignKey = false;
				colvarStatusID.IsReadOnly = false;
				colvarStatusID.DefaultSetting = @"";
				colvarStatusID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatusID);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DianDang"].AddSchema("DDPawnTicket",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("TicketID")]
		[Bindable(true)]
		public int TicketID 
		{
			get { return GetColumnValue<int>(Columns.TicketID); }
			set { SetColumnValue(Columns.TicketID, value); }
		}
		  
		[XmlAttribute("CustomerID")]
		[Bindable(true)]
		public int? CustomerID 
		{
			get { return GetColumnValue<int?>(Columns.CustomerID); }
			set { SetColumnValue(Columns.CustomerID, value); }
		}
		  
		[XmlAttribute("TicketNumber")]
		[Bindable(true)]
		public string TicketNumber 
		{
			get { return GetColumnValue<string>(Columns.TicketNumber); }
			set { SetColumnValue(Columns.TicketNumber, value); }
		}
		  
		[XmlAttribute("StartDate")]
		[Bindable(true)]
		public string StartDate 
		{
			get { return GetColumnValue<string>(Columns.StartDate); }
			set { SetColumnValue(Columns.StartDate, value); }
		}
		  
		[XmlAttribute("EndDate")]
		[Bindable(true)]
		public string EndDate 
		{
			get { return GetColumnValue<string>(Columns.EndDate); }
			set { SetColumnValue(Columns.EndDate, value); }
		}
		  
		[XmlAttribute("StatusID")]
		[Bindable(true)]
		public int? StatusID 
		{
			get { return GetColumnValue<int?>(Columns.StatusID); }
			set { SetColumnValue(Columns.StatusID, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varCustomerID,string varTicketNumber,string varStartDate,string varEndDate,int? varStatusID)
		{
			DDPawnTicket item = new DDPawnTicket();
			
			item.CustomerID = varCustomerID;
			
			item.TicketNumber = varTicketNumber;
			
			item.StartDate = varStartDate;
			
			item.EndDate = varEndDate;
			
			item.StatusID = varStatusID;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varTicketID,int? varCustomerID,string varTicketNumber,string varStartDate,string varEndDate,int? varStatusID)
		{
			DDPawnTicket item = new DDPawnTicket();
			
				item.TicketID = varTicketID;
			
				item.CustomerID = varCustomerID;
			
				item.TicketNumber = varTicketNumber;
			
				item.StartDate = varStartDate;
			
				item.EndDate = varEndDate;
			
				item.StatusID = varStatusID;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn TicketIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomerIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TicketNumberColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn StartDateColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn EndDateColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string TicketID = @"TicketID";
			 public static string CustomerID = @"CustomerID";
			 public static string TicketNumber = @"TicketNumber";
			 public static string StartDate = @"StartDate";
			 public static string EndDate = @"EndDate";
			 public static string StatusID = @"StatusID";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
