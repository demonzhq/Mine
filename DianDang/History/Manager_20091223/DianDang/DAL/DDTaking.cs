using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DianDang
{
	/// <summary>
	/// Strongly-typed collection for the DDTaking class.
	/// </summary>
    [Serializable]
	public partial class DDTakingCollection : ActiveList<DDTaking, DDTakingCollection>
	{	   
		public DDTakingCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DDTakingCollection</returns>
		public DDTakingCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DDTaking o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the DDTaking table.
	/// </summary>
	[Serializable]
	public partial class DDTaking : ActiveRecord<DDTaking>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DDTaking()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DDTaking(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DDTaking(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DDTaking(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("DDTaking", TableType.Table, DataService.GetInstance("DianDang"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarTakingID = new TableSchema.TableColumn(schema);
				colvarTakingID.ColumnName = "TakingID";
				colvarTakingID.DataType = DbType.Int32;
				colvarTakingID.MaxLength = 0;
				colvarTakingID.AutoIncrement = true;
				colvarTakingID.IsNullable = false;
				colvarTakingID.IsPrimaryKey = true;
				colvarTakingID.IsForeignKey = false;
				colvarTakingID.IsReadOnly = false;
				colvarTakingID.DefaultSetting = @"";
				colvarTakingID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTakingID);
				
				TableSchema.TableColumn colvarPawnageID = new TableSchema.TableColumn(schema);
				colvarPawnageID.ColumnName = "PawnageID";
				colvarPawnageID.DataType = DbType.Int32;
				colvarPawnageID.MaxLength = 0;
				colvarPawnageID.AutoIncrement = false;
				colvarPawnageID.IsNullable = true;
				colvarPawnageID.IsPrimaryKey = false;
				colvarPawnageID.IsForeignKey = false;
				colvarPawnageID.IsReadOnly = false;
				colvarPawnageID.DefaultSetting = @"";
				colvarPawnageID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPawnageID);
				
				TableSchema.TableColumn colvarClassID = new TableSchema.TableColumn(schema);
				colvarClassID.ColumnName = "ClassID";
				colvarClassID.DataType = DbType.Int32;
				colvarClassID.MaxLength = 0;
				colvarClassID.AutoIncrement = false;
				colvarClassID.IsNullable = true;
				colvarClassID.IsPrimaryKey = false;
				colvarClassID.IsForeignKey = false;
				colvarClassID.IsReadOnly = false;
				colvarClassID.DefaultSetting = @"";
				colvarClassID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarClassID);
				
				TableSchema.TableColumn colvarStatisticClassID = new TableSchema.TableColumn(schema);
				colvarStatisticClassID.ColumnName = "StatisticClassID";
				colvarStatisticClassID.DataType = DbType.Int32;
				colvarStatisticClassID.MaxLength = 0;
				colvarStatisticClassID.AutoIncrement = false;
				colvarStatisticClassID.IsNullable = true;
				colvarStatisticClassID.IsPrimaryKey = false;
				colvarStatisticClassID.IsForeignKey = false;
				colvarStatisticClassID.IsReadOnly = false;
				colvarStatisticClassID.DefaultSetting = @"";
				colvarStatisticClassID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatisticClassID);
				
				TableSchema.TableColumn colvarServiceFee = new TableSchema.TableColumn(schema);
				colvarServiceFee.ColumnName = "ServiceFee";
				colvarServiceFee.DataType = DbType.AnsiString;
				colvarServiceFee.MaxLength = 50;
				colvarServiceFee.AutoIncrement = false;
				colvarServiceFee.IsNullable = true;
				colvarServiceFee.IsPrimaryKey = false;
				colvarServiceFee.IsForeignKey = false;
				colvarServiceFee.IsReadOnly = false;
				colvarServiceFee.DefaultSetting = @"";
				colvarServiceFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarServiceFee);
				
				TableSchema.TableColumn colvarInterestFee = new TableSchema.TableColumn(schema);
				colvarInterestFee.ColumnName = "InterestFee";
				colvarInterestFee.DataType = DbType.AnsiString;
				colvarInterestFee.MaxLength = 50;
				colvarInterestFee.AutoIncrement = false;
				colvarInterestFee.IsNullable = true;
				colvarInterestFee.IsPrimaryKey = false;
				colvarInterestFee.IsForeignKey = false;
				colvarInterestFee.IsReadOnly = false;
				colvarInterestFee.DefaultSetting = @"";
				colvarInterestFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInterestFee);
				
				TableSchema.TableColumn colvarReturnFee = new TableSchema.TableColumn(schema);
				colvarReturnFee.ColumnName = "ReturnFee";
				colvarReturnFee.DataType = DbType.AnsiString;
				colvarReturnFee.MaxLength = 50;
				colvarReturnFee.AutoIncrement = false;
				colvarReturnFee.IsNullable = true;
				colvarReturnFee.IsPrimaryKey = false;
				colvarReturnFee.IsForeignKey = false;
				colvarReturnFee.IsReadOnly = false;
				colvarReturnFee.DefaultSetting = @"";
				colvarReturnFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarReturnFee);
				
				TableSchema.TableColumn colvarOverdueFee = new TableSchema.TableColumn(schema);
				colvarOverdueFee.ColumnName = "OverdueFee";
				colvarOverdueFee.DataType = DbType.AnsiString;
				colvarOverdueFee.MaxLength = 50;
				colvarOverdueFee.AutoIncrement = false;
				colvarOverdueFee.IsNullable = true;
				colvarOverdueFee.IsPrimaryKey = false;
				colvarOverdueFee.IsForeignKey = false;
				colvarOverdueFee.IsReadOnly = false;
				colvarOverdueFee.DefaultSetting = @"";
				colvarOverdueFee.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOverdueFee);
				
				TableSchema.TableColumn colvarOperationDate = new TableSchema.TableColumn(schema);
				colvarOperationDate.ColumnName = "OperationDate";
				colvarOperationDate.DataType = DbType.AnsiString;
				colvarOperationDate.MaxLength = 50;
				colvarOperationDate.AutoIncrement = false;
				colvarOperationDate.IsNullable = true;
				colvarOperationDate.IsPrimaryKey = false;
				colvarOperationDate.IsForeignKey = false;
				colvarOperationDate.IsReadOnly = false;
				colvarOperationDate.DefaultSetting = @"";
				colvarOperationDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOperationDate);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DianDang"].AddSchema("DDTaking",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("TakingID")]
		[Bindable(true)]
		public int TakingID 
		{
			get { return GetColumnValue<int>(Columns.TakingID); }
			set { SetColumnValue(Columns.TakingID, value); }
		}
		  
		[XmlAttribute("PawnageID")]
		[Bindable(true)]
		public int? PawnageID 
		{
			get { return GetColumnValue<int?>(Columns.PawnageID); }
			set { SetColumnValue(Columns.PawnageID, value); }
		}
		  
		[XmlAttribute("ClassID")]
		[Bindable(true)]
		public int? ClassID 
		{
			get { return GetColumnValue<int?>(Columns.ClassID); }
			set { SetColumnValue(Columns.ClassID, value); }
		}
		  
		[XmlAttribute("StatisticClassID")]
		[Bindable(true)]
		public int? StatisticClassID 
		{
			get { return GetColumnValue<int?>(Columns.StatisticClassID); }
			set { SetColumnValue(Columns.StatisticClassID, value); }
		}
		  
		[XmlAttribute("ServiceFee")]
		[Bindable(true)]
		public string ServiceFee 
		{
			get { return GetColumnValue<string>(Columns.ServiceFee); }
			set { SetColumnValue(Columns.ServiceFee, value); }
		}
		  
		[XmlAttribute("InterestFee")]
		[Bindable(true)]
		public string InterestFee 
		{
			get { return GetColumnValue<string>(Columns.InterestFee); }
			set { SetColumnValue(Columns.InterestFee, value); }
		}
		  
		[XmlAttribute("ReturnFee")]
		[Bindable(true)]
		public string ReturnFee 
		{
			get { return GetColumnValue<string>(Columns.ReturnFee); }
			set { SetColumnValue(Columns.ReturnFee, value); }
		}
		  
		[XmlAttribute("OverdueFee")]
		[Bindable(true)]
		public string OverdueFee 
		{
			get { return GetColumnValue<string>(Columns.OverdueFee); }
			set { SetColumnValue(Columns.OverdueFee, value); }
		}
		  
		[XmlAttribute("OperationDate")]
		[Bindable(true)]
		public string OperationDate 
		{
			get { return GetColumnValue<string>(Columns.OperationDate); }
			set { SetColumnValue(Columns.OperationDate, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varPawnageID,int? varClassID,int? varStatisticClassID,string varServiceFee,string varInterestFee,string varReturnFee,string varOverdueFee,string varOperationDate)
		{
			DDTaking item = new DDTaking();
			
			item.PawnageID = varPawnageID;
			
			item.ClassID = varClassID;
			
			item.StatisticClassID = varStatisticClassID;
			
			item.ServiceFee = varServiceFee;
			
			item.InterestFee = varInterestFee;
			
			item.ReturnFee = varReturnFee;
			
			item.OverdueFee = varOverdueFee;
			
			item.OperationDate = varOperationDate;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varTakingID,int? varPawnageID,int? varClassID,int? varStatisticClassID,string varServiceFee,string varInterestFee,string varReturnFee,string varOverdueFee,string varOperationDate)
		{
			DDTaking item = new DDTaking();
			
				item.TakingID = varTakingID;
			
				item.PawnageID = varPawnageID;
			
				item.ClassID = varClassID;
			
				item.StatisticClassID = varStatisticClassID;
			
				item.ServiceFee = varServiceFee;
			
				item.InterestFee = varInterestFee;
			
				item.ReturnFee = varReturnFee;
			
				item.OverdueFee = varOverdueFee;
			
				item.OperationDate = varOperationDate;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn TakingIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PawnageIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ClassIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn StatisticClassIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ServiceFeeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn InterestFeeColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ReturnFeeColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn OverdueFeeColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn OperationDateColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string TakingID = @"TakingID";
			 public static string PawnageID = @"PawnageID";
			 public static string ClassID = @"ClassID";
			 public static string StatisticClassID = @"StatisticClassID";
			 public static string ServiceFee = @"ServiceFee";
			 public static string InterestFee = @"InterestFee";
			 public static string ReturnFee = @"ReturnFee";
			 public static string OverdueFee = @"OverdueFee";
			 public static string OperationDate = @"OperationDate";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
