using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DianDang
{
	/// <summary>
	/// Strongly-typed collection for the DDPawnageInfo class.
	/// </summary>
    [Serializable]
	public partial class DDPawnageInfoCollection : ActiveList<DDPawnageInfo, DDPawnageInfoCollection>
	{	   
		public DDPawnageInfoCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DDPawnageInfoCollection</returns>
		public DDPawnageInfoCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DDPawnageInfo o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the DDPawnageInfo table.
	/// </summary>
	[Serializable]
	public partial class DDPawnageInfo : ActiveRecord<DDPawnageInfo>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DDPawnageInfo()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DDPawnageInfo(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DDPawnageInfo(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DDPawnageInfo(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("DDPawnageInfo", TableType.Table, DataService.GetInstance("DianDang"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarPawnageID = new TableSchema.TableColumn(schema);
				colvarPawnageID.ColumnName = "PawnageID";
				colvarPawnageID.DataType = DbType.Int32;
				colvarPawnageID.MaxLength = 0;
				colvarPawnageID.AutoIncrement = true;
				colvarPawnageID.IsNullable = false;
				colvarPawnageID.IsPrimaryKey = true;
				colvarPawnageID.IsForeignKey = false;
				colvarPawnageID.IsReadOnly = false;
				colvarPawnageID.DefaultSetting = @"";
				colvarPawnageID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPawnageID);
				
				TableSchema.TableColumn colvarClassID = new TableSchema.TableColumn(schema);
				colvarClassID.ColumnName = "ClassID";
				colvarClassID.DataType = DbType.Int32;
				colvarClassID.MaxLength = 0;
				colvarClassID.AutoIncrement = false;
				colvarClassID.IsNullable = true;
				colvarClassID.IsPrimaryKey = false;
				colvarClassID.IsForeignKey = false;
				colvarClassID.IsReadOnly = false;
				colvarClassID.DefaultSetting = @"";
				colvarClassID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarClassID);
				
				TableSchema.TableColumn colvarParentID = new TableSchema.TableColumn(schema);
				colvarParentID.ColumnName = "ParentID";
				colvarParentID.DataType = DbType.Int32;
				colvarParentID.MaxLength = 0;
				colvarParentID.AutoIncrement = false;
				colvarParentID.IsNullable = true;
				colvarParentID.IsPrimaryKey = false;
				colvarParentID.IsForeignKey = false;
				colvarParentID.IsReadOnly = false;
				colvarParentID.DefaultSetting = @"";
				colvarParentID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParentID);
				
				TableSchema.TableColumn colvarStatusID = new TableSchema.TableColumn(schema);
				colvarStatusID.ColumnName = "StatusID";
				colvarStatusID.DataType = DbType.Int32;
				colvarStatusID.MaxLength = 0;
				colvarStatusID.AutoIncrement = false;
				colvarStatusID.IsNullable = true;
				colvarStatusID.IsPrimaryKey = false;
				colvarStatusID.IsForeignKey = false;
				colvarStatusID.IsReadOnly = false;
				colvarStatusID.DefaultSetting = @"";
				colvarStatusID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStatusID);
				
				TableSchema.TableColumn colvarCountNumber = new TableSchema.TableColumn(schema);
				colvarCountNumber.ColumnName = "CountNumber";
				colvarCountNumber.DataType = DbType.AnsiString;
				colvarCountNumber.MaxLength = 50;
				colvarCountNumber.AutoIncrement = false;
				colvarCountNumber.IsNullable = true;
				colvarCountNumber.IsPrimaryKey = false;
				colvarCountNumber.IsForeignKey = false;
				colvarCountNumber.IsReadOnly = false;
				colvarCountNumber.DefaultSetting = @"";
				colvarCountNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCountNumber);
				
				TableSchema.TableColumn colvarWeight = new TableSchema.TableColumn(schema);
				colvarWeight.ColumnName = "Weight";
				colvarWeight.DataType = DbType.AnsiString;
				colvarWeight.MaxLength = 50;
				colvarWeight.AutoIncrement = false;
				colvarWeight.IsNullable = true;
				colvarWeight.IsPrimaryKey = false;
				colvarWeight.IsForeignKey = false;
				colvarWeight.IsReadOnly = false;
				colvarWeight.DefaultSetting = @"";
				colvarWeight.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWeight);
				
				TableSchema.TableColumn colvarPrice = new TableSchema.TableColumn(schema);
				colvarPrice.ColumnName = "Price";
				colvarPrice.DataType = DbType.AnsiString;
				colvarPrice.MaxLength = 50;
				colvarPrice.AutoIncrement = false;
				colvarPrice.IsNullable = true;
				colvarPrice.IsPrimaryKey = false;
				colvarPrice.IsForeignKey = false;
				colvarPrice.IsReadOnly = false;
				colvarPrice.DefaultSetting = @"";
				colvarPrice.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrice);
				
				TableSchema.TableColumn colvarFeeRate = new TableSchema.TableColumn(schema);
				colvarFeeRate.ColumnName = "FeeRate";
				colvarFeeRate.DataType = DbType.AnsiString;
				colvarFeeRate.MaxLength = 50;
				colvarFeeRate.AutoIncrement = false;
				colvarFeeRate.IsNullable = true;
				colvarFeeRate.IsPrimaryKey = false;
				colvarFeeRate.IsForeignKey = false;
				colvarFeeRate.IsReadOnly = false;
				colvarFeeRate.DefaultSetting = @"";
				colvarFeeRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFeeRate);
				
				TableSchema.TableColumn colvarInterestRate = new TableSchema.TableColumn(schema);
				colvarInterestRate.ColumnName = "InterestRate";
				colvarInterestRate.DataType = DbType.AnsiString;
				colvarInterestRate.MaxLength = 50;
				colvarInterestRate.AutoIncrement = false;
				colvarInterestRate.IsNullable = true;
				colvarInterestRate.IsPrimaryKey = false;
				colvarInterestRate.IsForeignKey = false;
				colvarInterestRate.IsReadOnly = false;
				colvarInterestRate.DefaultSetting = @"";
				colvarInterestRate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInterestRate);
				
				TableSchema.TableColumn colvarDiscountPercent = new TableSchema.TableColumn(schema);
				colvarDiscountPercent.ColumnName = "DiscountPercent";
				colvarDiscountPercent.DataType = DbType.AnsiString;
				colvarDiscountPercent.MaxLength = 50;
				colvarDiscountPercent.AutoIncrement = false;
				colvarDiscountPercent.IsNullable = true;
				colvarDiscountPercent.IsPrimaryKey = false;
				colvarDiscountPercent.IsForeignKey = false;
				colvarDiscountPercent.IsReadOnly = false;
				colvarDiscountPercent.DefaultSetting = @"";
				colvarDiscountPercent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiscountPercent);
				
				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.AnsiString;
				colvarDescription.MaxLength = 50;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = true;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				colvarDescription.DefaultSetting = @"";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);
				
				TableSchema.TableColumn colvarRemark = new TableSchema.TableColumn(schema);
				colvarRemark.ColumnName = "Remark";
				colvarRemark.DataType = DbType.AnsiString;
				colvarRemark.MaxLength = 50;
				colvarRemark.AutoIncrement = false;
				colvarRemark.IsNullable = true;
				colvarRemark.IsPrimaryKey = false;
				colvarRemark.IsForeignKey = false;
				colvarRemark.IsReadOnly = false;
				colvarRemark.DefaultSetting = @"";
				colvarRemark.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRemark);
				
				TableSchema.TableColumn colvarStartDate = new TableSchema.TableColumn(schema);
				colvarStartDate.ColumnName = "StartDate";
				colvarStartDate.DataType = DbType.AnsiString;
				colvarStartDate.MaxLength = 50;
				colvarStartDate.AutoIncrement = false;
				colvarStartDate.IsNullable = true;
				colvarStartDate.IsPrimaryKey = false;
				colvarStartDate.IsForeignKey = false;
				colvarStartDate.IsReadOnly = false;
				colvarStartDate.DefaultSetting = @"";
				colvarStartDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartDate);
				
				TableSchema.TableColumn colvarEndDate = new TableSchema.TableColumn(schema);
				colvarEndDate.ColumnName = "EndDate";
				colvarEndDate.DataType = DbType.AnsiString;
				colvarEndDate.MaxLength = 50;
				colvarEndDate.AutoIncrement = false;
				colvarEndDate.IsNullable = true;
				colvarEndDate.IsPrimaryKey = false;
				colvarEndDate.IsForeignKey = false;
				colvarEndDate.IsReadOnly = false;
				colvarEndDate.DefaultSetting = @"";
				colvarEndDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndDate);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DianDang"].AddSchema("DDPawnageInfo",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("PawnageID")]
		[Bindable(true)]
		public int PawnageID 
		{
			get { return GetColumnValue<int>(Columns.PawnageID); }
			set { SetColumnValue(Columns.PawnageID, value); }
		}
		  
		[XmlAttribute("ClassID")]
		[Bindable(true)]
		public int? ClassID 
		{
			get { return GetColumnValue<int?>(Columns.ClassID); }
			set { SetColumnValue(Columns.ClassID, value); }
		}
		  
		[XmlAttribute("ParentID")]
		[Bindable(true)]
		public int? ParentID 
		{
			get { return GetColumnValue<int?>(Columns.ParentID); }
			set { SetColumnValue(Columns.ParentID, value); }
		}
		  
		[XmlAttribute("StatusID")]
		[Bindable(true)]
		public int? StatusID 
		{
			get { return GetColumnValue<int?>(Columns.StatusID); }
			set { SetColumnValue(Columns.StatusID, value); }
		}
		  
		[XmlAttribute("CountNumber")]
		[Bindable(true)]
		public string CountNumber 
		{
			get { return GetColumnValue<string>(Columns.CountNumber); }
			set { SetColumnValue(Columns.CountNumber, value); }
		}
		  
		[XmlAttribute("Weight")]
		[Bindable(true)]
		public string Weight 
		{
			get { return GetColumnValue<string>(Columns.Weight); }
			set { SetColumnValue(Columns.Weight, value); }
		}
		  
		[XmlAttribute("Price")]
		[Bindable(true)]
		public string Price 
		{
			get { return GetColumnValue<string>(Columns.Price); }
			set { SetColumnValue(Columns.Price, value); }
		}
		  
		[XmlAttribute("FeeRate")]
		[Bindable(true)]
		public string FeeRate 
		{
			get { return GetColumnValue<string>(Columns.FeeRate); }
			set { SetColumnValue(Columns.FeeRate, value); }
		}
		  
		[XmlAttribute("InterestRate")]
		[Bindable(true)]
		public string InterestRate 
		{
			get { return GetColumnValue<string>(Columns.InterestRate); }
			set { SetColumnValue(Columns.InterestRate, value); }
		}
		  
		[XmlAttribute("DiscountPercent")]
		[Bindable(true)]
		public string DiscountPercent 
		{
			get { return GetColumnValue<string>(Columns.DiscountPercent); }
			set { SetColumnValue(Columns.DiscountPercent, value); }
		}
		  
		[XmlAttribute("Description")]
		[Bindable(true)]
		public string Description 
		{
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}
		  
		[XmlAttribute("Remark")]
		[Bindable(true)]
		public string Remark 
		{
			get { return GetColumnValue<string>(Columns.Remark); }
			set { SetColumnValue(Columns.Remark, value); }
		}
		  
		[XmlAttribute("StartDate")]
		[Bindable(true)]
		public string StartDate 
		{
			get { return GetColumnValue<string>(Columns.StartDate); }
			set { SetColumnValue(Columns.StartDate, value); }
		}
		  
		[XmlAttribute("EndDate")]
		[Bindable(true)]
		public string EndDate 
		{
			get { return GetColumnValue<string>(Columns.EndDate); }
			set { SetColumnValue(Columns.EndDate, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varClassID,int? varParentID,int? varStatusID,string varCountNumber,string varWeight,string varPrice,string varFeeRate,string varInterestRate,string varDiscountPercent,string varDescription,string varRemark,string varStartDate,string varEndDate)
		{
			DDPawnageInfo item = new DDPawnageInfo();
			
			item.ClassID = varClassID;
			
			item.ParentID = varParentID;
			
			item.StatusID = varStatusID;
			
			item.CountNumber = varCountNumber;
			
			item.Weight = varWeight;
			
			item.Price = varPrice;
			
			item.FeeRate = varFeeRate;
			
			item.InterestRate = varInterestRate;
			
			item.DiscountPercent = varDiscountPercent;
			
			item.Description = varDescription;
			
			item.Remark = varRemark;
			
			item.StartDate = varStartDate;
			
			item.EndDate = varEndDate;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varPawnageID,int? varClassID,int? varParentID,int? varStatusID,string varCountNumber,string varWeight,string varPrice,string varFeeRate,string varInterestRate,string varDiscountPercent,string varDescription,string varRemark,string varStartDate,string varEndDate)
		{
			DDPawnageInfo item = new DDPawnageInfo();
			
				item.PawnageID = varPawnageID;
			
				item.ClassID = varClassID;
			
				item.ParentID = varParentID;
			
				item.StatusID = varStatusID;
			
				item.CountNumber = varCountNumber;
			
				item.Weight = varWeight;
			
				item.Price = varPrice;
			
				item.FeeRate = varFeeRate;
			
				item.InterestRate = varInterestRate;
			
				item.DiscountPercent = varDiscountPercent;
			
				item.Description = varDescription;
			
				item.Remark = varRemark;
			
				item.StartDate = varStartDate;
			
				item.EndDate = varEndDate;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn PawnageIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ClassIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ParentIDColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn StatusIDColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CountNumberColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn WeightColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn PriceColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn FeeRateColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn InterestRateColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn DiscountPercentColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn RemarkColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn StartDateColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn EndDateColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string PawnageID = @"PawnageID";
			 public static string ClassID = @"ClassID";
			 public static string ParentID = @"ParentID";
			 public static string StatusID = @"StatusID";
			 public static string CountNumber = @"CountNumber";
			 public static string Weight = @"Weight";
			 public static string Price = @"Price";
			 public static string FeeRate = @"FeeRate";
			 public static string InterestRate = @"InterestRate";
			 public static string DiscountPercent = @"DiscountPercent";
			 public static string Description = @"Description";
			 public static string Remark = @"Remark";
			 public static string StartDate = @"StartDate";
			 public static string EndDate = @"EndDate";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
