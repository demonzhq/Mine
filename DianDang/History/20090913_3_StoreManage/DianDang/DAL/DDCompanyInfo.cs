using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DianDang
{
	/// <summary>
	/// Strongly-typed collection for the DDCompanyInfo class.
	/// </summary>
    [Serializable]
	public partial class DDCompanyInfoCollection : ActiveList<DDCompanyInfo, DDCompanyInfoCollection>
	{	   
		public DDCompanyInfoCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DDCompanyInfoCollection</returns>
		public DDCompanyInfoCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DDCompanyInfo o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the DDCompanyInfo table.
	/// </summary>
	[Serializable]
	public partial class DDCompanyInfo : ActiveRecord<DDCompanyInfo>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DDCompanyInfo()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DDCompanyInfo(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DDCompanyInfo(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DDCompanyInfo(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("DDCompanyInfo", TableType.Table, DataService.GetInstance("DianDang"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarCompanyID = new TableSchema.TableColumn(schema);
				colvarCompanyID.ColumnName = "CompanyID";
				colvarCompanyID.DataType = DbType.Int32;
				colvarCompanyID.MaxLength = 0;
				colvarCompanyID.AutoIncrement = true;
				colvarCompanyID.IsNullable = false;
				colvarCompanyID.IsPrimaryKey = true;
				colvarCompanyID.IsForeignKey = false;
				colvarCompanyID.IsReadOnly = false;
				colvarCompanyID.DefaultSetting = @"";
				colvarCompanyID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompanyID);
				
				TableSchema.TableColumn colvarCompanyName = new TableSchema.TableColumn(schema);
				colvarCompanyName.ColumnName = "CompanyName";
				colvarCompanyName.DataType = DbType.AnsiString;
				colvarCompanyName.MaxLength = 50;
				colvarCompanyName.AutoIncrement = false;
				colvarCompanyName.IsNullable = true;
				colvarCompanyName.IsPrimaryKey = false;
				colvarCompanyName.IsForeignKey = false;
				colvarCompanyName.IsReadOnly = false;
				colvarCompanyName.DefaultSetting = @"";
				colvarCompanyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompanyName);
				
				TableSchema.TableColumn colvarPhoneNumber = new TableSchema.TableColumn(schema);
				colvarPhoneNumber.ColumnName = "PhoneNumber";
				colvarPhoneNumber.DataType = DbType.AnsiString;
				colvarPhoneNumber.MaxLength = 50;
				colvarPhoneNumber.AutoIncrement = false;
				colvarPhoneNumber.IsNullable = true;
				colvarPhoneNumber.IsPrimaryKey = false;
				colvarPhoneNumber.IsForeignKey = false;
				colvarPhoneNumber.IsReadOnly = false;
				colvarPhoneNumber.DefaultSetting = @"";
				colvarPhoneNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneNumber);
				
				TableSchema.TableColumn colvarLicenseCode = new TableSchema.TableColumn(schema);
				colvarLicenseCode.ColumnName = "LicenseCode";
				colvarLicenseCode.DataType = DbType.AnsiString;
				colvarLicenseCode.MaxLength = 50;
				colvarLicenseCode.AutoIncrement = false;
				colvarLicenseCode.IsNullable = true;
				colvarLicenseCode.IsPrimaryKey = false;
				colvarLicenseCode.IsForeignKey = false;
				colvarLicenseCode.IsReadOnly = false;
				colvarLicenseCode.DefaultSetting = @"";
				colvarLicenseCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLicenseCode);
				
				TableSchema.TableColumn colvarAddress = new TableSchema.TableColumn(schema);
				colvarAddress.ColumnName = "Address";
				colvarAddress.DataType = DbType.AnsiString;
				colvarAddress.MaxLength = 50;
				colvarAddress.AutoIncrement = false;
				colvarAddress.IsNullable = true;
				colvarAddress.IsPrimaryKey = false;
				colvarAddress.IsForeignKey = false;
				colvarAddress.IsReadOnly = false;
				colvarAddress.DefaultSetting = @"";
				colvarAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress);
				
				TableSchema.TableColumn colvarSubCompanyNumber = new TableSchema.TableColumn(schema);
				colvarSubCompanyNumber.ColumnName = "SubCompanyNumber";
				colvarSubCompanyNumber.DataType = DbType.AnsiString;
				colvarSubCompanyNumber.MaxLength = 50;
				colvarSubCompanyNumber.AutoIncrement = false;
				colvarSubCompanyNumber.IsNullable = true;
				colvarSubCompanyNumber.IsPrimaryKey = false;
				colvarSubCompanyNumber.IsForeignKey = false;
				colvarSubCompanyNumber.IsReadOnly = false;
				colvarSubCompanyNumber.DefaultSetting = @"";
				colvarSubCompanyNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubCompanyNumber);
				
				TableSchema.TableColumn colvarSubCompanyName = new TableSchema.TableColumn(schema);
				colvarSubCompanyName.ColumnName = "SubCompanyName";
				colvarSubCompanyName.DataType = DbType.AnsiString;
				colvarSubCompanyName.MaxLength = 50;
				colvarSubCompanyName.AutoIncrement = false;
				colvarSubCompanyName.IsNullable = true;
				colvarSubCompanyName.IsPrimaryKey = false;
				colvarSubCompanyName.IsForeignKey = false;
				colvarSubCompanyName.IsReadOnly = false;
				colvarSubCompanyName.DefaultSetting = @"";
				colvarSubCompanyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubCompanyName);
				
				TableSchema.TableColumn colvarPostalcode = new TableSchema.TableColumn(schema);
				colvarPostalcode.ColumnName = "Postalcode";
				colvarPostalcode.DataType = DbType.AnsiString;
				colvarPostalcode.MaxLength = 50;
				colvarPostalcode.AutoIncrement = false;
				colvarPostalcode.IsNullable = true;
				colvarPostalcode.IsPrimaryKey = false;
				colvarPostalcode.IsForeignKey = false;
				colvarPostalcode.IsReadOnly = false;
				colvarPostalcode.DefaultSetting = @"";
				colvarPostalcode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPostalcode);
				
				TableSchema.TableColumn colvarShopHours = new TableSchema.TableColumn(schema);
				colvarShopHours.ColumnName = "ShopHours";
				colvarShopHours.DataType = DbType.AnsiString;
				colvarShopHours.MaxLength = 50;
				colvarShopHours.AutoIncrement = false;
				colvarShopHours.IsNullable = true;
				colvarShopHours.IsPrimaryKey = false;
				colvarShopHours.IsForeignKey = false;
				colvarShopHours.IsReadOnly = false;
				colvarShopHours.DefaultSetting = @"";
				colvarShopHours.ForeignKeyTableName = "";
				schema.Columns.Add(colvarShopHours);
				
				TableSchema.TableColumn colvarStartTicketNumber = new TableSchema.TableColumn(schema);
				colvarStartTicketNumber.ColumnName = "StartTicketNumber";
				colvarStartTicketNumber.DataType = DbType.AnsiString;
				colvarStartTicketNumber.MaxLength = 50;
				colvarStartTicketNumber.AutoIncrement = false;
				colvarStartTicketNumber.IsNullable = true;
				colvarStartTicketNumber.IsPrimaryKey = false;
				colvarStartTicketNumber.IsForeignKey = false;
				colvarStartTicketNumber.IsReadOnly = false;
				colvarStartTicketNumber.DefaultSetting = @"";
				colvarStartTicketNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartTicketNumber);
				
				TableSchema.TableColumn colvarSetupDate = new TableSchema.TableColumn(schema);
				colvarSetupDate.ColumnName = "SetupDate";
				colvarSetupDate.DataType = DbType.AnsiString;
				colvarSetupDate.MaxLength = 50;
				colvarSetupDate.AutoIncrement = false;
				colvarSetupDate.IsNullable = true;
				colvarSetupDate.IsPrimaryKey = false;
				colvarSetupDate.IsForeignKey = false;
				colvarSetupDate.IsReadOnly = false;
				colvarSetupDate.DefaultSetting = @"";
				colvarSetupDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSetupDate);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DianDang"].AddSchema("DDCompanyInfo",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("CompanyID")]
		[Bindable(true)]
		public int CompanyID 
		{
			get { return GetColumnValue<int>(Columns.CompanyID); }
			set { SetColumnValue(Columns.CompanyID, value); }
		}
		  
		[XmlAttribute("CompanyName")]
		[Bindable(true)]
		public string CompanyName 
		{
			get { return GetColumnValue<string>(Columns.CompanyName); }
			set { SetColumnValue(Columns.CompanyName, value); }
		}
		  
		[XmlAttribute("PhoneNumber")]
		[Bindable(true)]
		public string PhoneNumber 
		{
			get { return GetColumnValue<string>(Columns.PhoneNumber); }
			set { SetColumnValue(Columns.PhoneNumber, value); }
		}
		  
		[XmlAttribute("LicenseCode")]
		[Bindable(true)]
		public string LicenseCode 
		{
			get { return GetColumnValue<string>(Columns.LicenseCode); }
			set { SetColumnValue(Columns.LicenseCode, value); }
		}
		  
		[XmlAttribute("Address")]
		[Bindable(true)]
		public string Address 
		{
			get { return GetColumnValue<string>(Columns.Address); }
			set { SetColumnValue(Columns.Address, value); }
		}
		  
		[XmlAttribute("SubCompanyNumber")]
		[Bindable(true)]
		public string SubCompanyNumber 
		{
			get { return GetColumnValue<string>(Columns.SubCompanyNumber); }
			set { SetColumnValue(Columns.SubCompanyNumber, value); }
		}
		  
		[XmlAttribute("SubCompanyName")]
		[Bindable(true)]
		public string SubCompanyName 
		{
			get { return GetColumnValue<string>(Columns.SubCompanyName); }
			set { SetColumnValue(Columns.SubCompanyName, value); }
		}
		  
		[XmlAttribute("Postalcode")]
		[Bindable(true)]
		public string Postalcode 
		{
			get { return GetColumnValue<string>(Columns.Postalcode); }
			set { SetColumnValue(Columns.Postalcode, value); }
		}
		  
		[XmlAttribute("ShopHours")]
		[Bindable(true)]
		public string ShopHours 
		{
			get { return GetColumnValue<string>(Columns.ShopHours); }
			set { SetColumnValue(Columns.ShopHours, value); }
		}
		  
		[XmlAttribute("StartTicketNumber")]
		[Bindable(true)]
		public string StartTicketNumber 
		{
			get { return GetColumnValue<string>(Columns.StartTicketNumber); }
			set { SetColumnValue(Columns.StartTicketNumber, value); }
		}
		  
		[XmlAttribute("SetupDate")]
		[Bindable(true)]
		public string SetupDate 
		{
			get { return GetColumnValue<string>(Columns.SetupDate); }
			set { SetColumnValue(Columns.SetupDate, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varCompanyName,string varPhoneNumber,string varLicenseCode,string varAddress,string varSubCompanyNumber,string varSubCompanyName,string varPostalcode,string varShopHours,string varStartTicketNumber,string varSetupDate)
		{
			DDCompanyInfo item = new DDCompanyInfo();
			
			item.CompanyName = varCompanyName;
			
			item.PhoneNumber = varPhoneNumber;
			
			item.LicenseCode = varLicenseCode;
			
			item.Address = varAddress;
			
			item.SubCompanyNumber = varSubCompanyNumber;
			
			item.SubCompanyName = varSubCompanyName;
			
			item.Postalcode = varPostalcode;
			
			item.ShopHours = varShopHours;
			
			item.StartTicketNumber = varStartTicketNumber;
			
			item.SetupDate = varSetupDate;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varCompanyID,string varCompanyName,string varPhoneNumber,string varLicenseCode,string varAddress,string varSubCompanyNumber,string varSubCompanyName,string varPostalcode,string varShopHours,string varStartTicketNumber,string varSetupDate)
		{
			DDCompanyInfo item = new DDCompanyInfo();
			
				item.CompanyID = varCompanyID;
			
				item.CompanyName = varCompanyName;
			
				item.PhoneNumber = varPhoneNumber;
			
				item.LicenseCode = varLicenseCode;
			
				item.Address = varAddress;
			
				item.SubCompanyNumber = varSubCompanyNumber;
			
				item.SubCompanyName = varSubCompanyName;
			
				item.Postalcode = varPostalcode;
			
				item.ShopHours = varShopHours;
			
				item.StartTicketNumber = varStartTicketNumber;
			
				item.SetupDate = varSetupDate;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn CompanyIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CompanyNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PhoneNumberColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn LicenseCodeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn AddressColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SubCompanyNumberColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SubCompanyNameColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn PostalcodeColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ShopHoursColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn StartTicketNumberColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn SetupDateColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string CompanyID = @"CompanyID";
			 public static string CompanyName = @"CompanyName";
			 public static string PhoneNumber = @"PhoneNumber";
			 public static string LicenseCode = @"LicenseCode";
			 public static string Address = @"Address";
			 public static string SubCompanyNumber = @"SubCompanyNumber";
			 public static string SubCompanyName = @"SubCompanyName";
			 public static string Postalcode = @"Postalcode";
			 public static string ShopHours = @"ShopHours";
			 public static string StartTicketNumber = @"StartTicketNumber";
			 public static string SetupDate = @"SetupDate";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
