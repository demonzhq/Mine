using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DianDang
{
	/// <summary>
	/// Strongly-typed collection for the DDCustomerInfo class.
	/// </summary>
    [Serializable]
	public partial class DDCustomerInfoCollection : ActiveList<DDCustomerInfo, DDCustomerInfoCollection>
	{	   
		public DDCustomerInfoCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DDCustomerInfoCollection</returns>
		public DDCustomerInfoCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DDCustomerInfo o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the DDCustomerInfo table.
	/// </summary>
	[Serializable]
	public partial class DDCustomerInfo : ActiveRecord<DDCustomerInfo>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DDCustomerInfo()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DDCustomerInfo(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DDCustomerInfo(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DDCustomerInfo(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("DDCustomerInfo", TableType.Table, DataService.GetInstance("DianDang"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarCustomerID = new TableSchema.TableColumn(schema);
				colvarCustomerID.ColumnName = "CustomerID";
				colvarCustomerID.DataType = DbType.Int32;
				colvarCustomerID.MaxLength = 0;
				colvarCustomerID.AutoIncrement = true;
				colvarCustomerID.IsNullable = false;
				colvarCustomerID.IsPrimaryKey = true;
				colvarCustomerID.IsForeignKey = false;
				colvarCustomerID.IsReadOnly = false;
				colvarCustomerID.DefaultSetting = @"";
				colvarCustomerID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerID);
				
				TableSchema.TableColumn colvarCustomerName = new TableSchema.TableColumn(schema);
				colvarCustomerName.ColumnName = "CustomerName";
				colvarCustomerName.DataType = DbType.AnsiString;
				colvarCustomerName.MaxLength = 50;
				colvarCustomerName.AutoIncrement = false;
				colvarCustomerName.IsNullable = true;
				colvarCustomerName.IsPrimaryKey = false;
				colvarCustomerName.IsForeignKey = false;
				colvarCustomerName.IsReadOnly = false;
				colvarCustomerName.DefaultSetting = @"";
				colvarCustomerName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCustomerName);
				
				TableSchema.TableColumn colvarPhoneNumber = new TableSchema.TableColumn(schema);
				colvarPhoneNumber.ColumnName = "PhoneNumber";
				colvarPhoneNumber.DataType = DbType.AnsiString;
				colvarPhoneNumber.MaxLength = 50;
				colvarPhoneNumber.AutoIncrement = false;
				colvarPhoneNumber.IsNullable = true;
				colvarPhoneNumber.IsPrimaryKey = false;
				colvarPhoneNumber.IsForeignKey = false;
				colvarPhoneNumber.IsReadOnly = false;
				colvarPhoneNumber.DefaultSetting = @"";
				colvarPhoneNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhoneNumber);
				
				TableSchema.TableColumn colvarAddress = new TableSchema.TableColumn(schema);
				colvarAddress.ColumnName = "Address";
				colvarAddress.DataType = DbType.AnsiString;
				colvarAddress.MaxLength = 50;
				colvarAddress.AutoIncrement = false;
				colvarAddress.IsNullable = true;
				colvarAddress.IsPrimaryKey = false;
				colvarAddress.IsForeignKey = false;
				colvarAddress.IsReadOnly = false;
				colvarAddress.DefaultSetting = @"";
				colvarAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress);
				
				TableSchema.TableColumn colvarContactPerson = new TableSchema.TableColumn(schema);
				colvarContactPerson.ColumnName = "ContactPerson";
				colvarContactPerson.DataType = DbType.AnsiString;
				colvarContactPerson.MaxLength = 50;
				colvarContactPerson.AutoIncrement = false;
				colvarContactPerson.IsNullable = true;
				colvarContactPerson.IsPrimaryKey = false;
				colvarContactPerson.IsForeignKey = false;
				colvarContactPerson.IsReadOnly = false;
				colvarContactPerson.DefaultSetting = @"";
				colvarContactPerson.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContactPerson);
				
				TableSchema.TableColumn colvarCertTypeID = new TableSchema.TableColumn(schema);
				colvarCertTypeID.ColumnName = "CertTypeID";
				colvarCertTypeID.DataType = DbType.Int32;
				colvarCertTypeID.MaxLength = 0;
				colvarCertTypeID.AutoIncrement = false;
				colvarCertTypeID.IsNullable = true;
				colvarCertTypeID.IsPrimaryKey = false;
				colvarCertTypeID.IsForeignKey = false;
				colvarCertTypeID.IsReadOnly = false;
				colvarCertTypeID.DefaultSetting = @"";
				colvarCertTypeID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCertTypeID);
				
				TableSchema.TableColumn colvarCertNumber = new TableSchema.TableColumn(schema);
				colvarCertNumber.ColumnName = "CertNumber";
				colvarCertNumber.DataType = DbType.AnsiString;
				colvarCertNumber.MaxLength = 50;
				colvarCertNumber.AutoIncrement = false;
				colvarCertNumber.IsNullable = true;
				colvarCertNumber.IsPrimaryKey = false;
				colvarCertNumber.IsForeignKey = false;
				colvarCertNumber.IsReadOnly = false;
				colvarCertNumber.DefaultSetting = @"";
				colvarCertNumber.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCertNumber);

                TableSchema.TableColumn colvarCreatDate = new TableSchema.TableColumn(schema);
                colvarCreatDate.ColumnName = "CreatDate";
                colvarCreatDate.DataType = DbType.AnsiString;
                colvarCreatDate.MaxLength = 50;
                colvarCreatDate.AutoIncrement = false;
                colvarCreatDate.IsNullable = true;
                colvarCreatDate.IsPrimaryKey = false;
                colvarCreatDate.IsForeignKey = false;
                colvarCreatDate.IsReadOnly = false;
                colvarCreatDate.DefaultSetting = @"";
                colvarCreatDate.ForeignKeyTableName = "";
                schema.Columns.Add(colvarCreatDate);

				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DianDang"].AddSchema("DDCustomerInfo",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("CustomerID")]
		[Bindable(true)]
		public int CustomerID 
		{
			get { return GetColumnValue<int>(Columns.CustomerID); }
			set { SetColumnValue(Columns.CustomerID, value); }
		}
		  
		[XmlAttribute("CustomerName")]
		[Bindable(true)]
		public string CustomerName 
		{
			get { return GetColumnValue<string>(Columns.CustomerName); }
			set { SetColumnValue(Columns.CustomerName, value); }
		}
		  
		[XmlAttribute("PhoneNumber")]
		[Bindable(true)]
		public string PhoneNumber 
		{
			get { return GetColumnValue<string>(Columns.PhoneNumber); }
			set { SetColumnValue(Columns.PhoneNumber, value); }
		}
		  
		[XmlAttribute("Address")]
		[Bindable(true)]
		public string Address 
		{
			get { return GetColumnValue<string>(Columns.Address); }
			set { SetColumnValue(Columns.Address, value); }
		}
		  
		[XmlAttribute("ContactPerson")]
		[Bindable(true)]
		public string ContactPerson 
		{
			get { return GetColumnValue<string>(Columns.ContactPerson); }
			set { SetColumnValue(Columns.ContactPerson, value); }
		}
		  
		[XmlAttribute("CertTypeID")]
		[Bindable(true)]
		public int? CertTypeID 
		{
			get { return GetColumnValue<int?>(Columns.CertTypeID); }
			set { SetColumnValue(Columns.CertTypeID, value); }
		}
		  
		[XmlAttribute("CertNumber")]
		[Bindable(true)]
		public string CertNumber 
		{
			get { return GetColumnValue<string>(Columns.CertNumber); }
			set { SetColumnValue(Columns.CertNumber, value); }
		}

        [XmlAttribute("CreatDate")]
        [Bindable(true)]
        public string CreatDate
        {
            get { return GetColumnValue<string>(Columns.CreatDate); }
            set { SetColumnValue(Columns.CreatDate, value); }
        }

		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varCustomerName,string varPhoneNumber,string varAddress,string varContactPerson,int? varCertTypeID,string varCertNumber,string varCreatDate)
		{
			DDCustomerInfo item = new DDCustomerInfo();
			
			item.CustomerName = varCustomerName;
			
			item.PhoneNumber = varPhoneNumber;
			
			item.Address = varAddress;
			
			item.ContactPerson = varContactPerson;
			
			item.CertTypeID = varCertTypeID;
			
			item.CertNumber = varCertNumber;

            item.CertNumber = varCertNumber;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varCustomerID,string varCustomerName,string varPhoneNumber,string varAddress,string varContactPerson,int? varCertTypeID,string varCertNumber,string varCreatDate)
		{
			DDCustomerInfo item = new DDCustomerInfo();
			
				item.CustomerID = varCustomerID;
			
				item.CustomerName = varCustomerName;
			
				item.PhoneNumber = varPhoneNumber;
			
				item.Address = varAddress;
			
				item.ContactPerson = varContactPerson;
			
				item.CertTypeID = varCertTypeID;
			
				item.CertNumber = varCertNumber;

                item.CreatDate = varCreatDate;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn CustomerIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CustomerNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PhoneNumberColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn AddressColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ContactPersonColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CertTypeIDColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn CertNumberColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        public static TableSchema.TableColumn CreatDateColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string CustomerID = @"CustomerID";
			 public static string CustomerName = @"CustomerName";
			 public static string PhoneNumber = @"PhoneNumber";
			 public static string Address = @"Address";
			 public static string ContactPerson = @"ContactPerson";
			 public static string CertTypeID = @"CertTypeID";
			 public static string CertNumber = @"CertNumber";
             public static string CreatDate = @"CreatDate";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
