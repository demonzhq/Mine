using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DianDang
{
	/// <summary>
	/// Strongly-typed collection for the DDRole class.
	/// </summary>
    [Serializable]
	public partial class DDRoleCollection : ActiveList<DDRole, DDRoleCollection>
	{	   
		public DDRoleCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DDRoleCollection</returns>
		public DDRoleCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DDRole o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the DDRoles table.
	/// </summary>
	[Serializable]
	public partial class DDRole : ActiveRecord<DDRole>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DDRole()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DDRole(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DDRole(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DDRole(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("DDRoles", TableType.Table, DataService.GetInstance("DianDang"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarRoleID = new TableSchema.TableColumn(schema);
				colvarRoleID.ColumnName = "RoleID";
				colvarRoleID.DataType = DbType.Int32;
				colvarRoleID.MaxLength = 0;
				colvarRoleID.AutoIncrement = true;
				colvarRoleID.IsNullable = false;
				colvarRoleID.IsPrimaryKey = true;
				colvarRoleID.IsForeignKey = false;
				colvarRoleID.IsReadOnly = false;
				colvarRoleID.DefaultSetting = @"";
				colvarRoleID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRoleID);
				
				TableSchema.TableColumn colvarRoleName = new TableSchema.TableColumn(schema);
				colvarRoleName.ColumnName = "RoleName";
				colvarRoleName.DataType = DbType.AnsiStringFixedLength;
				colvarRoleName.MaxLength = 10;
				colvarRoleName.AutoIncrement = false;
				colvarRoleName.IsNullable = true;
				colvarRoleName.IsPrimaryKey = false;
				colvarRoleName.IsForeignKey = false;
				colvarRoleName.IsReadOnly = false;
				colvarRoleName.DefaultSetting = @"";
				colvarRoleName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRoleName);

                TableSchema.TableColumn colvarAmountLimit = new TableSchema.TableColumn(schema);
                colvarAmountLimit.ColumnName = "AmountLimit";
                colvarAmountLimit.DataType = DbType.Int32;
                colvarAmountLimit.AutoIncrement = false;
                colvarAmountLimit.IsNullable = true;
                colvarAmountLimit.IsPrimaryKey = false;
                colvarAmountLimit.IsForeignKey = false;
                colvarAmountLimit.IsReadOnly = false;
                colvarAmountLimit.DefaultSetting = @"";
                colvarAmountLimit.ForeignKeyTableName = "";
                schema.Columns.Add(colvarAmountLimit);

				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DianDang"].AddSchema("DDRoles",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("RoleID")]
		[Bindable(true)]
		public int RoleID 
		{
			get { return GetColumnValue<int>(Columns.RoleID); }
			set { SetColumnValue(Columns.RoleID, value); }
		}
		  
		[XmlAttribute("RoleName")]
		[Bindable(true)]
		public string RoleName 
		{
			get { return GetColumnValue<string>(Columns.RoleName); }
			set { SetColumnValue(Columns.RoleName, value); }
		}

        [XmlAttribute("AmountLimit")]
        [Bindable(true)]
        public int AmountLimit
        {
            get { return GetColumnValue<int>(Columns.AmountLimit); }
            set { SetColumnValue(Columns.AmountLimit, value); }
        }
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varRoleName, int varAmountLimit)
		{
			DDRole item = new DDRole();
			
			item.RoleName = varRoleName;
            item.AmountLimit = varAmountLimit;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varRoleID,string varRoleName,int varAmountLimit)
		{
			DDRole item = new DDRole();
			
				item.RoleID = varRoleID;
			
				item.RoleName = varRoleName;

                item.AmountLimit = varAmountLimit;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn RoleIDColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn RoleNameColumn
        {
            get { return Schema.Columns[1]; }
        }

        public static TableSchema.TableColumn AmountLimitColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string RoleID = @"RoleID";
			 public static string RoleName = @"RoleName";
             public static string AmountLimit = @"AmountLimit";			
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
