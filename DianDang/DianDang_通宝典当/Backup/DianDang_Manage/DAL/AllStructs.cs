using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DianDang
{
	#region Tables Struct
	public partial struct Tables
	{
		
		public static readonly string DDCarInfo = @"DDCarInfo";
        
		public static readonly string DDCertType = @"DDCertTypes";
        
		public static readonly string DDCompanyInfo = @"DDCompanyInfo";
        
		public static readonly string DDCustomerInfo = @"DDCustomerInfo";
        
		public static readonly string DDFeeRate = @"DDFeeRate";
        
		public static readonly string DDGeneralParemeter = @"DDGeneralParemeters";
        
		public static readonly string DDHouseInfo = @"DDHouseInfo";
        
		public static readonly string DDMesureUnit = @"DDMesureUnit";
        
		public static readonly string DDModule = @"DDModules";
        
		public static readonly string DDNews = @"DDNews";
        
		public static readonly string DDOperation = @"DDOperation";
        
		public static readonly string DDPawnageClass = @"DDPawnageClass";
        
		public static readonly string DDPawnageInfo = @"DDPawnageInfo";
        
		public static readonly string DDPawnTicket = @"DDPawnTicket";
        
		public static readonly string DDPermission = @"DDPermissions";
        
		public static readonly string DDPrintParam = @"DDPrintParam";
        
		public static readonly string DDRole = @"DDRoles";
        
		public static readonly string DDSearchOption = @"DDSearchOption";
        
		public static readonly string DDSearchType = @"DDSearchType";
        
		public static readonly string DDStatisticClass = @"DDStatisticClass";
        
		public static readonly string DDTicketStatus = @"DDTicketStatus";
        
		public static readonly string DDUser = @"DDUsers";
        
	}
	#endregion
    #region Schemas
    public partial class Schemas {
		
		public static TableSchema.Table DDCarInfo
		{
            get { return DataService.GetSchema("DDCarInfo", "DianDang"); }
		}
        
		public static TableSchema.Table DDCertType
		{
            get { return DataService.GetSchema("DDCertTypes", "DianDang"); }
		}
        
		public static TableSchema.Table DDCompanyInfo
		{
            get { return DataService.GetSchema("DDCompanyInfo", "DianDang"); }
		}
        
		public static TableSchema.Table DDCustomerInfo
		{
            get { return DataService.GetSchema("DDCustomerInfo", "DianDang"); }
		}
        
		public static TableSchema.Table DDFeeRate
		{
            get { return DataService.GetSchema("DDFeeRate", "DianDang"); }
		}
        
		public static TableSchema.Table DDGeneralParemeter
		{
            get { return DataService.GetSchema("DDGeneralParemeters", "DianDang"); }
		}
        
		public static TableSchema.Table DDHouseInfo
		{
            get { return DataService.GetSchema("DDHouseInfo", "DianDang"); }
		}
        
		public static TableSchema.Table DDMesureUnit
		{
            get { return DataService.GetSchema("DDMesureUnit", "DianDang"); }
		}
        
		public static TableSchema.Table DDModule
		{
            get { return DataService.GetSchema("DDModules", "DianDang"); }
		}
        
		public static TableSchema.Table DDNews
		{
            get { return DataService.GetSchema("DDNews", "DianDang"); }
		}
        
		public static TableSchema.Table DDOperation
		{
            get { return DataService.GetSchema("DDOperation", "DianDang"); }
		}
        
		public static TableSchema.Table DDPawnageClass
		{
            get { return DataService.GetSchema("DDPawnageClass", "DianDang"); }
		}
        
		public static TableSchema.Table DDPawnageInfo
		{
            get { return DataService.GetSchema("DDPawnageInfo", "DianDang"); }
		}
        
		public static TableSchema.Table DDPawnTicket
		{
            get { return DataService.GetSchema("DDPawnTicket", "DianDang"); }
		}
        
		public static TableSchema.Table DDPermission
		{
            get { return DataService.GetSchema("DDPermissions", "DianDang"); }
		}
        
		public static TableSchema.Table DDPrintParam
		{
            get { return DataService.GetSchema("DDPrintParam", "DianDang"); }
		}
        
		public static TableSchema.Table DDRole
		{
            get { return DataService.GetSchema("DDRoles", "DianDang"); }
		}
        
		public static TableSchema.Table DDSearchOption
		{
            get { return DataService.GetSchema("DDSearchOption", "DianDang"); }
		}
        
		public static TableSchema.Table DDSearchType
		{
            get { return DataService.GetSchema("DDSearchType", "DianDang"); }
		}
        
		public static TableSchema.Table DDStatisticClass
		{
            get { return DataService.GetSchema("DDStatisticClass", "DianDang"); }
		}
        
		public static TableSchema.Table DDTicketStatus
		{
            get { return DataService.GetSchema("DDTicketStatus", "DianDang"); }
		}
        
		public static TableSchema.Table DDUser
		{
            get { return DataService.GetSchema("DDUsers", "DianDang"); }
		}
        
	
    }
    #endregion
    #region View Struct
    public partial struct Views 
    {
		
    }
    #endregion
    
    #region Query Factories
	public static partial class DB
	{
        public static DataProvider _provider = DataService.Providers["DianDang"];
        static ISubSonicRepository _repository;
        public static ISubSonicRepository Repository 
        {
            get 
            {
                if (_repository == null)
                    return new SubSonicRepository(_provider);
                return _repository; 
            }
            set { _repository = value; }
        }
        public static Select SelectAllColumnsFrom<T>() where T : RecordBase<T>, new()
	    {
            return Repository.SelectAllColumnsFrom<T>();
	    }
	    public static Select Select()
	    {
            return Repository.Select();
	    }
	    
		public static Select Select(params string[] columns)
		{
            return Repository.Select(columns);
        }
	    
		public static Select Select(params Aggregate[] aggregates)
		{
            return Repository.Select(aggregates);
        }
   
	    public static Update Update<T>() where T : RecordBase<T>, new()
	    {
            return Repository.Update<T>();
	    }
	    
	    public static Insert Insert()
	    {
            return Repository.Insert();
	    }
	    
	    public static Delete Delete()
	    {
            return Repository.Delete();
	    }
	    
	    public static InlineQuery Query()
	    {
            return Repository.Query();
	    }
	    	    
	    
	}
    #endregion
    
}
#region Databases
public partial struct Databases 
{
	
	public static readonly string DianDang = @"DianDang";
    
}
#endregion